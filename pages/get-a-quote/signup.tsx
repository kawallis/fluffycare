import { AuthErrorCodes, createUserWithEmailAndPassword } from "@firebase/auth";
import { useFormik } from "formik";
import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import * as Yup from "yup";

import InputBox from "../../components/form/InputBox";
import { Button } from "../../components/shared/Button";
import { auth, db } from "../../config/firebase";
import { setDoc, doc, serverTimestamp } from "@firebase/firestore";
import { useAuthState } from "react-firebase-hooks/auth";

const PetName: NextPage = () => {
  const [user] = useAuthState(auth);
  const router = useRouter();

  let [remoteError, setRemoteError] = useState<string | null>(null);

  useEffect(() => {
    if (!!user) {
      router.push("/get-a-quote/calculating");
    }
  });

  const formik = useFormik({
    initialValues: {
      name: "",
      email: "",
      password: "",
    },
    validationSchema: Yup.object({
      name: Yup.string().min(5).required("Required"),
      email: Yup.string().email("Invalid email address").required("Required"),
      password: Yup.string().min(8).max(16).required("Required"),
    }),
    onSubmit: async ({ name, email, password }) => {
      try {
        let { user } = await createUserWithEmailAndPassword(
          auth,
          email,
          password
        );

        await setDoc(doc(db, "users", user.uid), {
          email,
          name,
          createdAt: serverTimestamp(),
          updatedAt: null,
        });
        router.push("/get-a-quote/calculating");
      } catch (e: any) {
        switch (e.code) {
          case AuthErrorCodes.EMAIL_EXISTS:
            setRemoteError(
              "This email is already in use. Try using another or logging in"
            );
            break;
          default:
            setRemoteError(e.message);
        }
      }
    },
  });

  return (
    <div>
      <Head>
        <title>FluffyCare | Step 9</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex items-center flex-col max-h-full">
        <div className="h-48 flex justify-center items-end p-4 w-full lg:w-3/4">
          <h1 className="text-3xl md:text-4xl font-bold text-center mb-6">
            Ok last thing! Please tell us where to send your quote.
          </h1>
        </div>
        <div className="h-92 flex flex-col justify-center align-baseline w-full md:w-1/2 lg:w-1/3">
          {remoteError && (
            <div className="rounded-md bg-red-50 p-4 mb-4">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg
                    className="h-5 w-5 text-red-400"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fillRule="evenodd"
                      d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                      clipRule="evenodd"
                    />
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm leading-5 font-medium text-red-800">
                    There was an error with your submission
                  </h3>
                  <div className="mt-2 text-sm leading-5 text-red-700">
                    <ul className="list-disc pl-5">
                      <li>{remoteError}</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          )}
          <InputBox
            type="text"
            placeholder="Name"
            label=""
            icon="users"
            name={formik.getFieldProps("name").name}
            value={formik.getFieldProps("name").value}
            onChange={formik.getFieldProps("name").onChange}
            onBlur={formik.getFieldProps("name").onBlur}
            touched={formik.touched.name}
            error={formik.errors.name}
          />
          <InputBox
            type="email"
            placeholder="Email"
            label=""
            icon="mail"
            name={formik.getFieldProps("email").name}
            value={formik.getFieldProps("email").value}
            onChange={formik.getFieldProps("email").onChange}
            onBlur={formik.getFieldProps("email").onBlur}
            touched={formik.touched.email}
            error={formik.errors.email}
          />
          <InputBox
            type="password"
            placeholder="Password"
            label=""
            icon="password"
            name={formik.getFieldProps("password").name}
            value={formik.getFieldProps("password").value}
            onChange={formik.getFieldProps("password").onChange}
            onBlur={formik.getFieldProps("password").onBlur}
            touched={formik.touched.password}
            error={formik.errors.password}
          />
          <p className="text-sm text-gray-900 mb-6 mt-6">
            By creating an account I agree to receive policy documents by email
            and the <span className="underline">Terms and Conditions</span>
          </p>
        </div>

        <div className="h-32 flex justify-center items-end md:items-center py-6 w-full">
          <Button
            text="Continue"
            disabled={!(formik.isValid && formik.dirty)}
            onClick={() => {
              formik.handleSubmit();
            }}
          />
        </div>
      </main>
    </div>
  );
};

export default PetName;
